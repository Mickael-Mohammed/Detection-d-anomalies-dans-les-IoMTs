# -*- coding: utf-8 -*-
"""Decision Tree - Curve ROC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BivJujZXARZ0zHnsRtZtyo3YNrJrqFCp
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import LabelEncoder

# Charger les données à partir du fichier CSV
data = pd.read_csv('TrainDataset.csv')

# Supprimer la deuxième ligne du DataFrame
data = data.drop(0)

# Séparer les caractéristiques (X) des étiquettes (y)
X = data.iloc[:, 1:-1]
y = data.iloc[:, -1]

# Convertir les étiquettes en valeurs numériques
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Diviser les données en ensembles d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Créer le modèle de régression logistique
model = LogisticRegression()

# Entraîner le modèle sur l'ensemble d'entraînement
model.fit(X_train, y_train)

# Obtenir les probabilités de prédiction pour l'ensemble de test
y_probs = model.predict_proba(X_test)[:, 1]

# Calculer les valeurs du taux de faux positifs et du taux de vrais positifs
fpr, tpr, thresholds = roc_curve(y_test, y_probs)

# Calculer l'aire sous la courbe ROC (AUC-ROC)
auc_score = auc(fpr, tpr)

# Tracer la courbe ROC
plt.plot(fpr, tpr, label=f'AUC = {auc_score:.2f}')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positives Rate')
plt.ylabel('True Positives Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_curve, auc
from sklearn.preprocessing import LabelEncoder

# Charger les données à partir du fichier CSV
data = pd.read_csv('Forecast_Train.csv')

data = data.drop(0)
# Séparer les caractéristiques (X) des étiquettes (y)
X = data.iloc[:, 1:-1]
y = data.iloc[:, -1]

print(data)
print(X)
print(y)

# Convertir les étiquettes en valeurs numériques
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Diviser les données en ensembles d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Créer le modèle de régression logistique
model = LogisticRegression()

# Entraîner le modèle sur l'ensemble d'entraînement
model.fit(X_train, y_train)

# Obtenir les probabilités de prédiction pour l'ensemble de test
y_probs = model.predict_proba(X_test)[:, 1]

# Calculer les valeurs du taux de faux positifs et du taux de vrais positifs
fpr, tpr, thresholds = roc_curve(y_test, y_probs)

# Calculer l'aire sous la courbe ROC (AUC-ROC)
auc_score = auc(fpr, tpr)

# Tracer la courbe ROC
plt.plot(fpr, tpr, label=f'AUC = {auc_score:.2f}')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positives Rate')
plt.ylabel('True Positives Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()